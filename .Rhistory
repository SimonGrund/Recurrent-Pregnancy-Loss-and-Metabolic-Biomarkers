Combined = ifelse(Got_pregnant == T & Live_birth == F, "Pregnant but no live birth", Combined),
Combined = ifelse(Got_pregnant == T & Live_birth == T, "Pregnant and live birth", Combined),
Combined = ifelse(is.na(Live_birth), "Missing data", Combined)
)
table(Samples$Combined) #Ask ML if missing data is actually cause they were never pregnant...
table(Samples$Excluded)
### Biomarkers
bio = d%>%
dplyr::select(ID = record_id, age, BMI, hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
### Time to do some modelling:
### I can summarize pregnancny and live birth into a 4-level factor . Or, i can make two separate models.
# A nested structure could be represented in Bayesian, but hard for me to implement and unfamiliar to the readers.
#So... Either two binom GLM or one multilevel, with no inherent relation between the levels.
# I gues two seperate are best. Easier to conclude from.
#### Predicting getting pregnant  ######
#HBA1C
d = left_join(Samples, bio)
gg = glm(
data = d,
formula = "Got_pregnant ~ age",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
age = data.frame(feature = "Age",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
gg = glm(
data = d,
formula = "Got_pregnant ~ BMI",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
bmi = data.frame(feature = "BMI",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
gg = glm(
data = d,
formula = "Got_pregnant ~ hba1c",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
hba1c = data.frame(feature = "hba1c",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#glucose
gg = glm(
data = d,
formula = "Got_pregnant ~ glucose",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
glucose = data.frame(feature = "glucose",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#total_kolesterol
gg = glm(
data = d,
formula = "Got_pregnant ~ total_kolesterol",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
total_kolesterol = data.frame(feature = "Total kolesterol",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#ldl
gg = glm(
data = d,
formula = "Got_pregnant ~ ldl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
ldl = data.frame(feature = "ldl",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#hdl
gg = glm(
data = d,
formula = "Got_pregnant ~ hdl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
hdl = data.frame(feature = "hdl",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#triglycerider
gg = glm(
data = d,
formula = "Got_pregnant ~ triglycerider",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
triglycerider = data.frame(feature = "triglycerider",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
###Assemble output
out = bind_rows(age, bmi, hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
out$feature = factor(out$feature, levels = rev(c("Age", "BMI","hba1c", "glucose", "Total kolesterol", "ldl", "hdl", "triglycerider")),
labels = rev(c("Age", "BMI","HbA1c", "Glucose", "Total cholesterol", "LDL", "HDL", "Triglycerides")))
#Fix p-values for format < 0,05 / < 0,01 / < 0,001
out = out%>%
mutate(
pval2 = "NS",
pval2 = ifelse(pval < 0.05, "p \u2264 0.05", pval2),
pval2 = ifelse(pval < 0.01, "p \u2264 0.01", pval2),
pval2 = ifelse(pval < 0.001, "p \u2264 0.001", pval2)
)
g1 = ggplot(out, aes(x = odds_ratio_glm, y = feature))+
geom_point(shape = 18, size = 4)+
geom_text(aes(label = pval2), nudge_y = 0.5, size = 3)+ #Fixing the pval labels
#  geom_text(aes(label = paste("p = ", scales::scientific(pval,3), sep ="")), nudge_y = 0.5, size = 3)+
geom_errorbarh(aes(xmin = confint_2.5., xmax = confint_97.5.), height = 0.1)+
ggpubr::theme_classic2()+
xlab("Odds ratio with 95%-confidence interval")+
ggtitle("Achieved pregnancy")+
geom_vline(xintercept = 1, lty = 2, col = "grey20")
g1
### Now the same for live birth ####
#HBA1C
d = left_join(Samples, bio)%>%
dplyr::filter(Excluded == F, Got_pregnant == T)
table(d$Live_birth)
#Age
gg = glm(
data = d,
formula = "Live_birth ~ age",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
age = data.frame(feature = "Age",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#BMI
gg = glm(
data = d,
formula = "Live_birth ~ BMI",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
bmi = data.frame(feature = "BMI",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
gg = glm(
data = d,
formula = "Live_birth ~ hba1c",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
hba1c = data.frame(feature = "hba1c",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#glucose
gg = glm(
data = d,
formula = "Live_birth ~ glucose",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
glucose = data.frame(feature = "glucose",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#total_kolesterol
gg = glm(
data = d,
formula = "Live_birth ~ total_kolesterol",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
total_kolesterol = data.frame(feature = "Total kolesterol",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#ldl
gg = glm(
data = d,
formula = "Live_birth ~ ldl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
ldl = data.frame(feature = "ldl",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#hdl
gg = glm(
data = d,
formula = "Live_birth ~ hdl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
hdl = data.frame(feature = "hdl",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
#triglycerider
gg = glm(
data = d,
formula = "Live_birth ~ triglycerider",
family = binomial(link = "logit") #Logistic
)
summary(gg)
odds_ratio = exp(coef(gg))[2] #Exponential of the coefficient of being elevated
triglycerider = data.frame(feature = "triglycerider",
pval = coef(summary(gg))[,4][2],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[2]]),
'confint_97,5%' = exp(confint(gg)[[4]]))
###Assemble output
out = bind_rows(age, bmi, hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
out$feature = factor(out$feature, levels = rev(c("Age", "BMI","hba1c", "glucose", "Total kolesterol", "ldl", "hdl", "triglycerider")),
labels = rev(c("Age", "BMI","HbA1c", "Glucose", "Total cholesterol", "LDL", "HDL", "Triglycerides")))
out = out%>%
mutate(
pval2 = "NS",
pval2 = ifelse(pval < 0.05, "p \u2264 0.05", pval2),
pval2 = ifelse(pval < 0.01, "p \u2264 0.01", pval2),
pval2 = ifelse(pval < 0.001, "p \u2264 0.001", pval2)
)
g2 = ggplot(out, aes(x = odds_ratio_glm, y = feature))+
geom_point(shape = 18, size = 4)+
geom_text(aes(label = pval2), nudge_y = 0.5, size = 3)+ #Fixing the pval labels
#geom_text(aes(label = paste("p = ", scales::scientific(pval,3), sep ="")), nudge_y = 0.5, size = 3)+
geom_errorbarh(aes(xmin = confint_2.5., xmax = confint_97.5.), height = 0.1)+
ggpubr::theme_classic2()+
xlab("Odds ratio with 95%-confidence interval")+
ggtitle("Live birth, in case of pregnancy")+
geom_vline(xintercept = 1, lty = 2, col = "grey20")
g2
library(patchwork)
g = g1 / g2 & theme(
plot.title = element_text(size = 9),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9),
axis.text = element_text(size = 9),
#  plot.margin = margin(20,6,6,6)
)
quartz(type = 'pdf', file = "../Results/Figures/FIgure 5//Rate_of_pregnancy_and_live_birth.pdf", width = 6, height = 8)
g
dev.off()
#ggsave(plot = g, filename = "../Results/Fi  /Rate_of_pregnancy_and_live_birth.pdf", device = cairo_pdf(), width = 6, height = 8)
library(tidyverse)
library(data.table)
source("Plot_themes.R")
#Casegruppeanalyse: pregnancy rate (blev gravid/blev ikke gravid), og for dem der blev gravide live birth (ja/nej).
# Analysen skal vÃ¦re logistisk regression med OR (+ 95% konfidensinterval)
# for hver af de metaboliske biomarkÃ¸rer â ogsÃ¥ bÃ¥de justeret (BMI og alder) og ujusteret
#Load data
d = readxl::read_excel("../Data/05-06-2023 - case og control til statistik (949).xlsx")
d$group = factor(d$group, levels = c(1,0), labels = c("Cases", "Control"))
prior_loss = filter(d, group == "Control" & n_losses_before_ref > 0)
d = filter(d, !record_id %in% prior_loss$record_id)
d = dplyr::rename(d, Live_birth = "Live birth")
#We only look at the cases here
d = filter(d, group == "Cases")
#Quick summary
table(d$`Pregnancy rate`) #563/715 = 79% #0, did not achieve pregnancy | 1, achieved pregnancy
table(d$Live_birth, useNA = "always") #Not sure what the numbers indicate #0 No | 1 yes | 3 never achieved pregnancy | 8 pregnant in the 1st trimester (26/10-22) | 9 pregnant in the 2nd trimester (26/10-22) | 10 pregnant in the 3rd trimester (26/10-22) |  11  loss to follow up
table(d$outcome_pregnancy_hv)
#We want to predict both pregnancy and, in case of pregnancy, live birth...
#Lets summarize the data at a per sample level
Samples = d%>%
dplyr::select(ID = record_id, patient_type,  Got_pregnant = "Pregnancy rate",Live_birth)%>%
mutate(
Excluded = F,
Excluded = ifelse(Live_birth %in% c(3,8,9,11), T, Excluded),
Got_pregnant = ifelse(Got_pregnant == 1, T, F),
Live_birth = ifelse(Live_birth %in% c(1,10), T, F), #We also count 3rd trimester births as live births
Combined = "Not pregnant",
Combined = ifelse(Got_pregnant == T & Live_birth == F, "Pregnant but no live birth", Combined),
Combined = ifelse(Got_pregnant == T & Live_birth == T, "Pregnant and live birth", Combined),
Combined = ifelse(is.na(Live_birth), "Missing data", Combined)
)
table(Samples$Combined) #Ask ML if missing data is actually cause they were never pregnant...
### Biomarkers
bio = d%>%
dplyr::select(ID = record_id, age, BMI, hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
### Time to do some modelling:
### I can summarize pregnancny and live birth into a 4-level factor . Or, i can make two separate models.
# A nested structure could be represented in Bayesian, but hard for me to implement and unfamiliar to the readers.
#So... Either two binom GLM or one multilevel, with no inherent relation between the levels.
# I gues two seperate are best. Easier to conclude from.
#### Predicting getting pregnant  ######
#HBA1C
d = left_join(Samples, bio)
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + hba1c",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
hba1c = data.frame(feature = "hba1c",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#glucose
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + glucose",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
glucose = data.frame(feature = "glucose",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#total_kolesterol
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + total_kolesterol",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
total_kolesterol = data.frame(feature = "Total kolesterol",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#ldl
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + ldl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
ldl = data.frame(feature = "ldl",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#hdl
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + hdl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
hdl = data.frame(feature = "hdl",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#triglycerider
gg = glm(
data = d,
formula = "Got_pregnant ~ age + BMI + triglycerider",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
triglycerider = data.frame(feature = "triglycerider",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
###Assemble output
out = bind_rows(hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
out$feature = factor(out$feature, levels = rev(c("Age", "BMI","hba1c", "glucose", "Total kolesterol", "ldl", "hdl", "triglycerider")),
labels = rev(c("Age", "BMI","HbA1c", "Glucose", "Total cholesterol", "LDL", "HDL", "Triglycerides")))
out = out%>%
mutate(
pval2 = "NS",
pval2 = ifelse(pval < 0.05, "p \u2264 0.05", pval2),
pval2 = ifelse(pval < 0.01, "p \u2264 0.01", pval2),
pval2 = ifelse(pval < 0.001, "p \u2264 0.001", pval2)
)
g1 = ggplot(out, aes(x = odds_ratio_glm, y = feature))+
geom_point(shape = 18, size = 4)+
geom_text(aes(label = pval2), nudge_y = 0.5, size = 3)+ #Fixing the pval labels
#geom_text(aes(label = paste("p = ", scales::scientific(pval,3), sep ="")), nudge_y = 0.5, size = 3)+
geom_errorbarh(aes(xmin = confint_2.5., xmax = confint_97.5.), height = 0.1)+
ggpubr::theme_classic2()+
xlab("Odds ratio with 95%-confidence interval")+
ggtitle("Achieved pregnancy")+
geom_vline(xintercept = 1, lty = 2, col = "grey20")
g1
### Now the same for live birth ####
#HBA1C
d = left_join(Samples, bio)%>%
dplyr::filter(Excluded == F, Got_pregnant == T)
table(d$Live_birth)
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + hba1c",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
hba1c = data.frame(feature = "hba1c",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#glucose
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + glucose",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
glucose = data.frame(feature = "glucose",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#total_kolesterol
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + total_kolesterol",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
total_kolesterol = data.frame(feature = "Total kolesterol",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#ldl
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + ldl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
ldl = data.frame(feature = "ldl",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#hdl
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + hdl",
family = binomial(link = "logit") #Logistic
)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
hdl = data.frame(feature = "hdl",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
#triglycerider
gg = glm(
data = d,
formula = "Live_birth ~ age + BMI + triglycerider",
family = binomial(link = "logit") #Logistic
)
summary(gg)
odds_ratio = exp(coef(gg))[4] #Exponential of the coefficient of being elevated
triglycerider = data.frame(feature = "triglycerider",
pval = coef(summary(gg))[,4][4],
odds_ratio_glm = odds_ratio,
'confint_2,5%' = exp(confint(gg)[[4]]),
'confint_97,5%' = exp(confint(gg)[[8]]))
###Assemble output
out = bind_rows(hba1c, glucose, total_kolesterol, ldl, hdl, triglycerider)
out$feature = factor(out$feature, levels = rev(c("Age", "BMI","hba1c", "glucose", "Total kolesterol", "ldl", "hdl", "triglycerider")),
labels = rev(c("Age", "BMI","HbA1c", "Glucose", "Total cholesterol", "LDL", "HDL", "Triglycerides")))
out = out%>%
mutate(
pval2 = "NS",
pval2 = ifelse(pval < 0.05, "p \u2264 0.05", pval2),
pval2 = ifelse(pval < 0.01, "p \u2264 0.01", pval2),
pval2 = ifelse(pval < 0.001, "p \u2264 0.001", pval2)
)
g2 = ggplot(out, aes(x = odds_ratio_glm, y = feature))+
geom_point(shape = 18, size = 4)+
geom_text(aes(label = pval2), nudge_y = 0.5, size = 3)+ #Fixing the pval labels
#  geom_text(aes(label = paste("p = ", scales::scientific(pval,3), sep ="")), nudge_y = 0.5, size = 3)+
geom_errorbarh(aes(xmin = confint_2.5., xmax = confint_97.5.), height = 0.1)+
ggpubr::theme_classic2()+
xlab("Odds ratio with 95%-confidence interval")+
ggtitle("Live birth, in case of pregnancy")+
geom_vline(xintercept = 1, lty = 2, col = "grey20")
g2
library(patchwork)
g = g1 / g2 & theme(
plot.title = element_text(size = 9),
axis.title.y = element_blank(),
axis.title.x = element_text(size = 9),
axis.text = element_text(size = 9)
)
g
quartz(type = 'pdf', file = "../Results/Figures/FIgure 5//Rate_of_pregnancy_and_live_birth_ADJUSTED.pdf", width = 6, height = 7)
g
dev.off()
#ggsave(plot = g, filename = "../Results/Figures/Rate_of_pregnancy_and_live_birth_ADJUSTED.pdf", device = cairo_pdf(), width = 6, height = 7)
